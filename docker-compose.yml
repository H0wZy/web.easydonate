version: '3.8'

services:
  # ===========================================
  # BANCO DE DADOS
  # ===========================================
  postgres:
    image: postgres:18-alpine
    container_name: easydonate-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./databases/scripts/init.${POSTGRES_DB}.sh:/docker-entrypoint-initdb.d/init-databases.sh
    networks:
      - web-easydonate-network
    healthcheck:
      # pg_isready without -d will try to connect to a database with the same
      # name as the user, which in our case (admeasydonate) does not exist and
      # generates repeated FATAL logs. Specify the database explicitly.
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===========================================
  # BACKEND - MICROSERVIÃ‡OS
  # ===========================================

  # User API
  user-api:
    build:
      context: ./backend/src
      dockerfile: User.Api/Dockerfile
    container_name: easydonate-user-api
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Port=${POSTGRES_PORT};SearchPath=${USER_DB_SEARCHPATH}
    ports:
      - "${USER_API_PORT}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - web-easydonate-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth API
  auth-api:
    build:
      context: ./backend/src
      dockerfile: Auth.Api/Dockerfile
    container_name: easydonate-auth-api
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Port=${POSTGRES_PORT};SearchPath=${AUTH_DB_SEARCHPATH}
    ports:
      - "${AUTH_API_PORT}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - web-easydonate-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ./backend/src
      dockerfile: Api.Gateway/Dockerfile
    container_name: easydonate-gateway-api
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - Services__UserApi=http://user-api:8080
      - Services__AuthApi=http://auth-api:8080
    ports:
      - "${GATEWAY_API_PORT}:8080"
    depends_on:
      - user-api
      - auth-api
    networks:
      - web-easydonate-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # FRONTEND
  # ===========================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=http://localhost:${GATEWAY_API_PORT}
    container_name: easydonate-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT}:80"
    depends_on:
      - api-gateway
    networks:
      - web-easydonate-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

# ===========================================
# NETWORKS
# ===========================================
networks:
  web-easydonate-network:
    driver: bridge

# ===========================================
# VOLUMES
# ===========================================
volumes:
  postgres_data:
    driver: local