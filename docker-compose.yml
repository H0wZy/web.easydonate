services:
  # ===========================================
  # USER.API DATABASE
  # ===========================================
  user-db:
    image: postgres:18-alpine
    container_name: user-db-postgres
    restart: unless-stopped
    environment:
      # Variables used by postgres image for initial DB/user creation
      POSTGRES_DB: ${USER_DB}
      POSTGRES_USER: ${USER_DB_USER}
      POSTGRES_PASSWORD: ${USER_DB_PASSWORD}
      # Keep USER_DB* variables available for custom init scripts that rely on them
      USER_DB: ${USER_DB}
      USER_DB_USER: ${USER_DB_USER}
      USER_DB_PASSWORD: ${USER_DB_PASSWORD}
    ports:
      - "${USER_DB_PORT}:5432"
    volumes:
      - user_db_data:/var/lib/postgresql/data
    networks:
      - web-easydonate-network
    healthcheck:
      # pg_isready without -d will try to connect to a database with the same
      # name as the user, which in our case (admeasydonate) does not exist and
      # generates repeated FATAL logs. Specify the database explicitly.
      test: ["CMD-SHELL", "pg_isready -U ${USER_DB_USER} -d ${USER_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===========================================
  # TODO: AUTH.API DATABASE 
  # ===========================================
  # auth-db:
  #   image: postgres:18-alpine
  #   container_name: dbauth-postgres
  #   restart: unless-stopped
  #   environment:
  #     AUTH_DB: ${AUTH_DB}
  #     AUTH_DB_USER: ${AUTH_DB_USER}
  #     AUTH_DB_PASSWORD: ${AUTH_DB_PASSWORD}
  #   ports:
  #     - "${AUTH_DB_PORT}:5432"
  #   volumes:
  #     - auth_db_data:/var/lib/postgresql/data
  #   networks:
  #     - web-easydonate-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${AUTH_DB_USER} -d ${AUTH_DB}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # ===========================================
  # BACKEND - MICROSERVIÃ‡OS
  # ===========================================

  # User API
  user-api:
    build:
      context: ./backend/src
      dockerfile: User.Api/Dockerfile
    container_name: easydonate-user-api
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ConnectionStrings__DefaultConnection=Host=user-db;Database=${USER_DB};Username=${USER_DB_USER};Password=${USER_DB_PASSWORD};Port=5432;
    ports:
      - "${USER_API_PORT}:8080"
    depends_on:
      user-db:
        condition: service_healthy
    networks:
      - web-easydonate-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth API
  auth-api:
    build:
      context: ./backend/src
      dockerfile: Auth.Api/Dockerfile
    container_name: easydonate-auth-api
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ConnectionStrings__DefaultConnection=Host=auth-db;Database=${AUTH_DB};Username=${AUTH_DB_USER};Password=${AUTH_DB_PASSWORD};Port=${AUTH_DB_PORT};
    ports:
      - "${AUTH_API_PORT}:8080"
    # depends_on:
    #   auth-db:
    #     condition: service_healthy
    networks:
      - web-easydonate-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ./backend/src
      dockerfile: Api.Gateway/Dockerfile
    container_name: easydonate-gateway-api
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - Services__UserApi=http://user-api:8080
      - Services__AuthApi=http://auth-api:8080
    ports:
      - "${GATEWAY_API_PORT}:8080"
    depends_on:
      - user-api
      - auth-api
    networks:
      - web-easydonate-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # FRONTEND
  # ===========================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=http://localhost:${GATEWAY_API_PORT}
    container_name: easydonate-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT}:80"
    depends_on:
      - api-gateway
    networks:
      - web-easydonate-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

# ===========================================
# NETWORKS
# ===========================================
networks:
  web-easydonate-network:
    driver: bridge

# ===========================================
# VOLUMES
# ===========================================
volumes:
  user_db_data:
  # auth_db_data: